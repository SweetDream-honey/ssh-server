
/**
 * All the imports here
 */
const { readFileSync } = require('fs');
const { inspect } = require('util');
const { Server } = require('ssh2');

/**
 * All local requirements
 */
const generateHostKey = require('./utils/generate-host-key');
const verbose = process.argv.includes('--verbose');
const config = require('./config.json');

/**
 * All the constants here
 * and all pre-defined values
 */
try {
    readFileSync('host.key');
} catch (err) {
    generateHostKey();
}

/**
 * The stream output for the client
 */
function streamResponse(stream) {
    stream.write('Go fuck yourself!\n');
    stream.exit(0)
    stream.end()
}

/**
 * The server source code
 */
new Server({
    hostKeys: [readFileSync('host.key')] // host key generated by utils/generate-host-key.js
}, (client) => {
    console.log(`[SSH-SERVER-HONEY] - new client: ${client._sock._peername.address}`)

    client.on('authentication', (ctx) => {
        let allowed = true;

        if(verbose) {
            console.log('[SSH-SERVER-HONEY] - v - Authentication method: ' + ctx.method);
        }

        switch (ctx.method) {
            case 'password':
                if(verbose) {
                    console.log(`[SSH-SERVER-HONEY] - v - Auth username: ${ctx.username} | password: ${ctx.password}`)
                }
                allowed = true
                break;
            case 'publickey':
                allowed = false;
                break;
            default:
                allowed = false;
                break;
        }

        if (allowed)
            ctx.accept();
        else
            ctx.reject();
    }).on('ready', () => {
        console.log(`[SSH-SERVER-HONEY] - New client force login: ${client._sock._peername.address}`)

        // Start adding the backend here

            // todo

        // End adding the backend here

        client.on('session', (accept, reject) => {
            let session = accept();
            if(verbose) {
                console.log('[SSH-SERVER-HONEY] - v - Session created!');
            }

            session.once('pty', (accept, reject, info) => {
                if(verbose) {
                    console.log('[SSH-SERVER-HONEY] - v - Client wants to allocate a pty with info: ', info);
                }
            }).on('shell', (accept, reject) => {
                if(verbose) {
                    console.log('[SSH-SERVER-HONEY] - v - Client wants to start a shell');
                }
                streamResponse(accept());
            }).on('exec', (accept, reject, info) => {
                if(verbose) {
                    console.log('[SSH-SERVER-HONEY] - v - Client wants to execute: ' + inspect(info.command));
                }
                streamResponse(accept());
            })
        });
    
    }).on('close', () => {
        if(verbose) {
            console.log('[SSH-SERVER-HONEY] - v - Client disconnected');
        }
    });

}).listen(config.port, config.hostname, function () {
    console.log('Listening on port ' + this.address().port);
});